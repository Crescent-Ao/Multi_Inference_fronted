<template>
  <div class="page-container">
    <!-- 顶部主导航 -->
    <div class="nav-header">
      <div class="left">
        <n-text class="logo">MiDF</n-text>
      </div>
      <div class="center">
        <div class="nav-items">
          <n-button
            v-for="item in navItems"
            :key="item.key"
            :class="['nav-button', { active: activeNav === item.key }]"
            text
            @click="handleNavClick(item.key)"
          >
            <template #icon>
              <n-icon>
                <component :is="item.icon" />
              </n-icon>
            </template>
            <span class="nav-label">{{ item.label }}</span>
          </n-button>
        </div>
      </div>
      <div class="right">
        <n-button type="primary">开始</n-button>
        <n-avatar round size="small" :src="userAvatar" />
      </div>
    </div>

    <!-- 工作室子导航 -->
    <div class="sub-nav">
      <div class="sub-nav-content">
        <div class="category-nav">
          <n-button
            v-for="category in categories"
            :key="category.key"
            :class="['category-button', { active: activeCategory === category.key }]"
            text
            @click="handleCategoryClick(category.key)"
          >
            <template #icon>
              <n-icon>
                <component :is="category.icon" />
              </n-icon>
            </template>
            {{ category.label }}
          </n-button>
        </div>
        <div class="right">
          <n-input placeholder="搜索" round>
            <template #prefix>
              <n-icon><Search /></n-icon>
            </template>
          </n-input>
        </div>
      </div>
    </div>

    <!-- 卡片内容区域 -->
    <div class="content">
      <div class="content-wrapper">
        <div class="tools-row">
          <div v-for="tool in tools" :key="tool.id" class="tool-item">
            <div class="tool-card" @click="handleCardClick(tool)">
              <div class="tool-header">
                <n-avatar
                  :src="tool.icon"
                  :round="false"
                  size="medium"
                  class="tool-icon"
                />
                <div class="tool-info">
                  <div class="tool-title">{{ tool.name }}</div>
                  <div class="author">作者 {{ tool.author }}</div>
                </div>
              </div>
              <div class="description">{{ tool.description }}</div>
              <div class="tool-tags">
                <n-tag 
                  v-for="tag in tool.tags" 
                  :key="tag"
                  size="tiny"
                  :bordered="false"
                  class="tag"
                >
                  {{ tag }}
                </n-tag>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 添加弹出层 -->
    <div v-if="showDetail" class="modal-overlay">
      <div class="modal-content">
        <div class="modal-header">
          <!-- 左侧标题和图标 -->
          <div class="modal-title">
            <n-avatar :src="selectedTool?.icon" :round="false" size="medium" class="tool-icon" />
            <span>{{ selectedTool?.name }}</span>
          </div>

          <!-- 中间描述信息 -->
          <div class="tool-description">
            {{ selectedTool?.description.slice(0, 180) }}{{ selectedTool?.description.length > 180 ? '...' : '' }}
          </div>

          <!-- 右侧关闭按钮，使用 margin-left: auto 推到最右边 -->
          <div class="close-button">
            <n-button quaternary circle @click="closeDetail">
              <template #icon><n-icon><Close /></n-icon></template>
            </n-button>
          </div>
        </div>

        <div class="modal-body">
          <div class="content-layout">
            <div class="image-section">
              <div class="image-containers">
                <!-- 输入图像区域 -->
                <div class="image-container">
                  <div class="image-header">
                    <span class="title">输入图像</span>
                  </div>
                  <n-upload
                    accept="image/*"
                    :show-file-list="false"
                    @change="handleInputImageUpload"
                  >
                    <div 
                      class="image-content clickable" 
                      @dragover.prevent 
                      @drop="handleDrop"
                    >
                      <img 
                        v-if="inputImage" 
                        :src="inputImage" 
                        alt="输入图像"
                        class="preview-image"
                      />
                      <div v-else class="placeholder">
                        <n-icon size="48" class="placeholder-icon">
                          <Image />
                        </n-icon>
                        <p>点击或拖拽图片到此处上传</p>
                      </div>
                    </div>
                  </n-upload>
                </div>

                <!-- 输出图像区域 -->
                <div class="image-container">
                  <div class="image-header">
                    <span class="title">输出图像</span>
                  </div>
                  <div 
                    class="image-content clickable"
                    @click="handleDownload"
                    :class="{ 'can-download': outputImage }"
                  >
                    <img 
                      v-if="outputImage" 
                      :src="outputImage" 
                      alt="输出图像"
                      class="preview-image"
                    />
                    <div v-else class="placeholder">
                      <n-icon size="48" class="placeholder-icon">
                        <Image />
                      </n-icon>
                      <p>处理结果将显示在这里</p>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="control-panel">
                <div class="control-row">
                  <div class="control-item">
                    <span class="label">推理框架</span>
                    <n-select
                      v-model:value="inferenceFramework"
                      :options="[
                        { label: 'Pytorch', value: 'pytorch' },
                        { label: 'ONNX', value: 'onnx' },
                        { label: 'TensorRT', value: 'tensorrt' }
                      ]"
                      size="small"
                    />
                  </div>
                  <div class="control-item">
                    <span class="label">推理精度</span>
                    <n-select
                      v-model:value="inferencePrecision"
                      :options="[
                        { label: 'FP32', value: 'fp32' },
                        { label: 'FP16', value: 'fp16' },
                        { label: 'INT8', value: 'int8' }
                      ]"
                      size="small"
                    />
                  </div>
                  <div class="control-item">
                    <span class="label">IoU 阈值</span>
                    <n-input-number
                      v-model:value="iouThreshold"
                      :min="0.01"
                      :max="0.99"
                      :step="0.01"
                      size="small"
                      placeholder="请输入 IoU 阈值"
                    />
                  </div>
                  <div class="control-item">
                    <span class="label">置信度阈值</span>
                    <n-input-number
                      v-model:value="confidenceThreshold"
                      :min="0.01"
                      :max="0.99"
                      :step="0.01"
                      size="small"
                      placeholder="请输入置信度阈值"
                    />
                  </div>
                </div>
                
                <div class="button-row">
                  <n-button 
                    class="action-button inference-button"
                    @click="handleInference"
                  >
                    <template #icon>
                      <n-icon>
                        <Rocket />
                      </n-icon>
                    </template>
                    Let's start inference 🚀
                  </n-button>
                  
                  <n-button
                    class="action-button download-button"
                    @click="handleDownloadResults"
                  >
                    <template #icon>
                      <n-icon>
                        <Eye />
                      </n-icon>
                    </template>
                    Inference Results Download 👀
                  </n-button>
                </div>
              </div>
            </div>

            
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script lang="ts" setup>
import DroneVehicleIcon from '@/assets/DroneVehicle.png'
import { ref } from 'vue'
import { 
  NButton, 
  NInput, 
  NIcon, 
  NAvatar,
  NText,
  NTag,
  NUpload,
  NSelect, 
  NInputNumber
} from 'naive-ui'
import { 
  Search,
  Cube,
  Book,
  Hammer,
  GridOutline, 
  ScanOutline, 
  ColorWandOutline,
  VideocamOutline,
  Close,
  Image,
  Download,
  CloudUpload,
  Rocket,
  Eye
} from '@vicons/ionicons5'

// 主导航配置
const navItems = [
  { key: 'search', label: '探索', icon: Search },
  { key: 'workspace', label: '工作箱', icon: Cube },
  { key: 'knowledge', label: '知识库', icon: Book },
  { key: 'tools', label: '工具', icon: Hammer }
]

// 类别配置
const categories = [
  { 
    key: 'all', 
    label: '全部',
    icon: GridOutline 
  },
  { 
    key: 'detection', 
    label: '目标检测',
    icon: ScanOutline 
  },
  { 
    key: 'segmentation', 
    label: '语义分割',
    icon: ColorWandOutline 
  },
  { 
    key: 'tracking', 
    label: '视频跟踪',
    icon: VideocamOutline 
  }
]

const activeNav = ref('workspace')
const activeCategory = ref('all')

const handleNavClick = (key: string) => {
  activeNav.value = key
}

const handleCategoryClick = (key: string) => {
  activeCategory.value = key
}

const userAvatar = ref('')

// 更新示例数据
const tools = ref([
  {
    id: 1,
    name: 'DroneVehicle (IR)',
    author: 'Crescent',
    icon: DroneVehicleIcon,
    description: 'DroneVehicle 数据集 是一个用于无人机视觉任务的开源数据集，包含数万张高分辨率图像，涵盖城市、乡村、高速公路等场景及多种天气条件。数据标注包括车辆、行人等目标的边界框和像素级分割，适用于目标检测、跟踪和场景理解等任务。MIDF支持了 TensrRT/ONNX/Pytorch 推理框架，支持低精度推理，支持多平台部署。',
    tags: ['目标检测', '红外图像', '低精度推理']
  },
  {
    id: 2,
    name: 'Bing',
    author: 'Dify',
    icon: 'https://www.bing.com/favicon.ico',
    description: 'Bing 搜索',
    tags: ['目标检测']
  },
  {
    id: 3,
    name: 'Perplexity',
    author: 'Dify',
    icon: '/path/to/perplexity-icon.png',
    description: 'Perplexity.AI',
    tags: ['语义分割']
  },
  {
    id: 4,
    name: 'DuckDuckGo',
    author: 'Yash Parmar',
    icon: '/path/to/duckduckgo-icon.png',
    description: '一个注重隐私的搜索引擎。',
    tags: ['语义分割'] 
  },
  {
    id: 5,
    name: 'SearchApi',
    author: 'SearchApi',
    icon: '/path/to/searchapi-icon.png',
    description: 'SearchApi 是一个强大的实时 SERP API，可提供来自 Google 搜索、Google 招聘、YouTube、...',
    tags: ['搜索', '商业', '新闻', '生产力']
  },
  // ... 可以继续添加更多工具
])

// 添加状态控制
const showDetail = ref(false)
const selectedTool = ref<any>(null)

// 点击卡片时的处理函数
const handleCardClick = (tool: any) => {
  selectedTool.value = tool
  showDetail.value = true
}

// 关闭详情的处理函数
const closeDetail = () => {
  showDetail.value = false
  selectedTool.value = null
}

// 图片处理相关的状态
const inputImage = ref<string>('')
const outputImage = ref<string>('')

// 处理输入图片上传
const handleInputImageUpload = (data: any) => {
  const file = data.file.file  // Naive UI 的文件对象结构
  if (file && file.type.startsWith('image/')) {
    const reader = new FileReader()
    reader.onload = (e) => {
      inputImage.value = e.target?.result as string
      // TODO: 在这里添加图像处理逻辑
      // 模拟输出图像
      setTimeout(() => {
        outputImage.value = inputImage.value
      }, 1000)
    }
    reader.readAsDataURL(file)
  }
}

// 处理拖拽上传
const handleDrop = (e: DragEvent) => {
  e.preventDefault()
  const file = e.dataTransfer?.files[0]
  if (file && file.type.startsWith('image/')) {
    const reader = new FileReader()
    reader.onload = (e) => {
      inputImage.value = e.target?.result as string
      // TODO: 在这里添加图像处理逻辑
      // 模拟输出图像
      setTimeout(() => {
        outputImage.value = inputImage.value
      }, 1000)
    }
    reader.readAsDataURL(file)
  }
}

// 处理结果下载
const handleDownload = () => {
  if (outputImage.value) {
    const link = document.createElement('a')
    link.download = 'result.png'
    link.href = outputImage.value
    link.click()
  }
}

// 添加控制参数
const inferenceFramework = ref('pytorch')
const inferencePrecision = ref('fp32')
const iouThreshold = ref(0.45)
const confidenceThreshold = ref(0.5)

// 添加按钮处理函数
const handleInference = () => {
  // TODO: 实现推理逻辑
  console.log('Starting inference...')
}

const handleDownloadResults = () => {
  // TODO: 实现下载结果逻辑
  console.log('Downloading results...')
}
</script>

<style scoped>
/* 整个页面容器 */
.page-container {
  min-height: 100vh;
  background-color: #f5f6f7; /* 整个页面使用浅灰色背景 */
}

/* 顶部导航 */
.nav-header {
  height: 64px;
  padding: 0 24px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #f5f6f7; /* 改为与页面相同的浅灰色背景 */
  border-bottom: 1px solid #eee;
}

.left {
  width: 200px;
}

.center {
  flex: 1;
  display: flex;
  justify-content: center;
}

.right {
  width: 200px;
  display: flex;
  justify-content: flex-end;
  align-items: center;
  gap: 16px;
}

.logo {
  font-size: 24px;
  font-weight: bold;
}

.nav-items {
  display: flex;
  gap: 4px;
}

.nav-button {
  display: flex;
  align-items: center;
  gap: 4px;
  padding: 4px 8px;
  border-radius: 4px;
  transition: all 0.3s;
  font-weight: 500;
  font-size: 14px;
}

.nav-button .n-icon {
  font-size: 14px;
}

.nav-button.active {
  background-color: #e6f4ef;
  color: #18a058;
  font-weight: 600;
}

.nav-button.active .n-icon {
  color: #18a058;
  fill: currentColor;
}

/* 子导航样式 */
.sub-nav {
  width: 100%;
  padding: 16px 0;
  background-color: #f5f6f7; /* 改为与页面相同的浅灰色背景 */
  border-bottom: 1px solid #eee;
}

.sub-nav-content {
  width: 100%;
  max-width: 1440px;
  margin: 0 auto;
  padding: 0 32px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.category-nav {
  display: flex;
  gap: 8px;
  padding: 0;
  margin: 0;
}

.category-button {
  display: flex;
  align-items: center;
  gap: 4px;
  padding: 4px 12px;
  border-radius: 4px;
  transition: all 0.3s;
  font-weight: 400;
  font-size: 14px;
}

.category-button .n-icon {
  font-size: 14px;
}

.category-button:hover {
  background-color: rgba(0, 0, 0, 0.05);
}

.category-button.active {
  background-color: #e6f4ef;
  color: #18a058;
  font-weight: 500;
}

.category-button.active .n-icon {
  color: #18a058;
  fill: currentColor;
}

.content {
  width: 100%;
  padding-top: 16px;
}

.content-wrapper {
  max-width: 1440px;
  margin: 0 auto;
  padding: 0 32px;
}

.tools-row {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  margin: 0;
}

.tool-item {
  width: calc((100% - 36px) / 4);
  margin: 0;
  padding: 0;
}

.tool-card {
  background: #ffffff;
  border-radius: 8px;
  padding: 20px;
  height: 100%;
  transition: all 0.3s;
  border: 1px solid #eee;
  cursor: pointer;
}

.tool-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}

.tool-header {
  display: flex;
  gap: 12px;
  margin-bottom: 18px;
}

.tool-icon {
  width: 50px;
  height: 50px;
  border-radius: 6px;
  flex-shrink: 0;
}

.tool-info {
  flex: 1;
  min-width: 0;
}

.tool-title {
  font-size: 14px;
  font-weight: 500;
  color: #1f2329;
  margin-bottom: 4px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.author {
  font-size: 12px;
  color: #86909c;
}

.description {
  font-size: 13px;
  color: #4e5969;
  margin: 18px 0;
  line-height: 1.5;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.tool-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 12px;
}

.tag {
  background: #f2f3f5;
  color: #4e5969;
  font-size: 12px;
  padding: 2px 8px;
  height: 20px;
  line-height: 16px;
  border-radius: 4px;
}

.tag .n-icon {
  font-size: 12px;
  margin-right: 4px;
}

/* 弹出层样式 */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.4);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background: white;
  border-radius: 0 0 12px 12px; /* 只保留底部圆角 */
  width: 96%;
  height: 96vh;
  max-width: none;
  position: relative;
  animation: modal-in 0.3s ease-out;
  display: flex;
  flex-direction: column;
}

.modal-header {
  padding: 20px 32px;
  border-bottom: 1px solid #eee;
  display: flex;
  align-items: center;
  background: white;
}

.modal-title {
  display: flex;
  align-items: center;
  gap: 12px;
  min-width: 180px; /* 稍微减少最小宽度 */
  white-space: nowrap;
}

.tool-description {
  flex: 1;
  font-size: 13px;
  color: #666;
  line-height: 1.5;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  padding: 0 24px; /* 使用 padding 代替 margin */
}

.close-button {
  margin-left: auto; /* 将关闭按钮推到最右边 */
}

.tool-icon {
  width: 32px;
  height: 32px;
}

.modal-header .n-button {
  margin-top: 8px;
}

.modal-body {
  flex: 1;
  overflow-y: auto;
  padding: 24px 32px;
}

@keyframes modal-in {
  from {
    opacity: 0;
    transform: scale(0.98);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.image-containers {
  display: flex;
  gap: 24px;
  height: calc(90vh - 200px);
  padding: 16px 24px;
}

.image-container {
  flex: 1;
  display: flex;
  flex-direction: column;
  background: #fff;
  border-radius: 8px;
  border: 1px solid #eee;
  overflow: hidden;
  height: 100%;
}

.image-header {
  padding: 8px 16px;
  border-bottom: 1px solid #eee;
}

.image-header .title {
  font-size: 14px;
  font-weight: 500;
  color: #333;
  line-height: 1.2;
}

.image-content {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  background: #f9f9f9;
  padding: 0;
  min-height: 360px;
}

.clickable {
  cursor: pointer;
  transition: all 0.3s;
}

.clickable:hover {
  background: #f5f5f5;
}

.can-download:hover {
  background: #f0f9f4;
}

.preview-image {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

.placeholder {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 16px;
  width: 100%;
  height: 100%;
}

.placeholder-icon {
  color: #ccc;
}

.placeholder p {
  margin: 0;
  font-size: 14px;
  color: #999;
}

/* 拖拽状态样式 */
.image-content.dragover {
  background: #f0f9f4;
  border: 2px dashed #18a058;
}

/* 修改上传区域样式 */
.n-upload {
  width: 100%;
  height: 100%;
  display: flex;
  flex: 1;
}

/* 修改上传组件样式 */
:deep(.n-upload) {
  display: flex;
  flex: 1;
  width: 100%;
  height: 100%;
}

:deep(.n-upload-trigger) {
  width: 100%;
  height: 100%;
}

.control-panel {
  margin-top: 16px;
  padding: 16px 24px;
  background: white;
  border-radius: 8px;
  border: 1px solid #eee;
}

.control-row {
  display: flex;
  gap: 16px;
  align-items: center;
  margin-bottom: 16px; /* 添加底部间距 */
}

.control-item {
  flex: 1;
  display: flex;
  align-items: center;
  gap: 8px;
  min-width: 0;
}

.label {
  min-width: 60px;
  font-size: 14px;
  color: #333;
  white-space: nowrap;
}

:deep(.n-select) {
  flex: 1;
  min-width: 0;
}

:deep(.n-input-number) {
  flex: 1;
  min-width: 0;
}

:deep(.n-select .n-base-selection) {
  min-width: 80px;
}

:deep(.n-input-number-input) {
  text-align: left;
  min-width: 80px;
}

/* 添加按钮行样式 */
.button-row {
  display: flex;
  gap: 16px;
  justify-content: space-between;
  margin-top: 16px;
  width: 100%;
}

.action-button {
  flex: 1;
  height: 40px;
  font-size: 14px;
  font-weight: 500;
  border: none;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  color: rgba(255, 255, 255, 0.85);
}

.action-button:active,
.action-button:focus {
  color: rgba(255, 255, 255, 0.85) !important; /* 强制保持颜色 */
}

.inference-button {
  background: linear-gradient(135deg, #36ad6a 0%, #4cd389 100%);
}

.inference-button:hover,
.inference-button:active,
.inference-button:focus {
  background: linear-gradient(135deg, #4cd389 0%, #36ad6a 100%);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(54, 173, 106, 0.2);
  color: #ffffff !important;
}

.download-button {
  background: linear-gradient(135deg, #4098fc 0%, #60aeff 100%);
}

.download-button:hover,
.download-button:active,
.download-button:focus {
  background: linear-gradient(135deg, #60aeff 0%, #4098fc 100%);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(64, 152, 252, 0.2);
  color: #ffffff !important;
}

:deep(.action-button .n-icon) {
  font-size: 18px;
  margin-right: 8px;
  opacity: 0.85; /* 图标初始状态也略微透明 */
  transition: opacity 0.3s ease; /* 添加图标透明度过渡 */
}

.action-button:hover :deep(.n-icon) {
  opacity: 1; /* 悬停时图标完全不透明 */
}

/* 添加动画效果 */
@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.02);
  }
  100% {
    transform: scale(1);
  }
}

.action-button:active {
  animation: pulse 0.3s ease;
}

.tool-info-section {
  padding: 16px 32px;
  border-bottom: 1px solid #eee;
  background: #f9f9f9;
}

.info-content {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.info-row {
  display: flex;
  gap: 48px;
}

.info-item {
  display: flex;
  align-items: center;
  gap: 12px;
}

.info-item .label {
  font-size: 14px;
  color: #666;
  min-width: 48px;
}

.info-item .value {
  font-size: 14px;
  color: #333;
}

.tags {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
}

.info-tag {
  background: #f0f0f0;
  color: #666;
}

.description-row {
  display: flex;
  gap: 12px;
}

.description-row .label {
  font-size: 14px;
  color: #666;
  min-width: 48px;
}

.description {
  flex: 1;
  margin: 0;
  font-size: 14px;
  line-height: 1.6;
  color: #333;
}

.content-layout {
  display: flex;
  gap: 24px;
  height: 100%;
}

.image-section {
  flex: 2; /* 占据更多空间 */
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.tool-info-section {
  flex: 1; /* 占据较少空间 */
  padding: 0 16px;
}

.info-card {
  background: #f9f9f9;
  border-radius: 8px;
  padding: 20px;
  border: 1px solid #eee;
}

.info-item {
  margin-bottom: 20px;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.info-item:last-child {
  margin-bottom: 0;
}

.info-item .label {
  font-size: 14px;
  color: #666;
  font-weight: 500;
}

.info-item .value {
  font-size: 14px;
  color: #333;
}

.tags {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
}

.info-tag {
  background: #f0f0f0;
  color: #666;
}

.description {
  margin: 0;
  font-size: 14px;
  line-height: 1.6;
  color: #333;
}
</style> 